{
	"info": {
		"_postman_id": "72e5f006-8bc8-412d-9372-62d8074fb0f9",
		"name": "bigneon-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c75bf77-b444-492f-87e6-0338e97b372b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:3000",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/status",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Setup",
			"item": [
				{
					"name": "Invites and User Creation",
					"item": [
						{
							"name": "Admin - Get Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "994fad7c-ed5c-4512-9db4-e64e1eb3f879",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"token\", json.access_token);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"superuser@test.com\", \"password\":\"password\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Current Me",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c75bf77-b444-492f-87e6-0338e97b372b",
										"type": "text/javascript",
										"exec": [
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"admin_id\", json.user.id)"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://localhost:3000",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/users/me",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Creates Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"last_org_id\", JSON.parse(responseBody).id);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Jazzy_{{$timestamp}}\",\n\"owner_user_id\": \"{{admin_id}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Invite Org Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_invite_token\", r.security_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											"pm.environment.set(\"last_org_owner_email\", \"orgowner\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"{{last_org_owner_email}}\",\n \"roles\" : [\"OrgOwner\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - Get Invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations/{{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations",
										"{{last_invite_token}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - Accept Invite - Not logged in - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_owner_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Org\",\n\t\"last_name\":\"Owner\",\n\t\"email\":\"{{last_org_owner_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_owner_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{last_org_owner_email}}\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Accept Invite - Logged In - OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Invite OrgAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_invite_token\", r.security_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											"pm.environment.set(\"last_org_admin_email\", \"orgadmin\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"{{last_org_admin_email}}\",\n \"roles\" : [\"OrgAdmin\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_admin_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Org\",\n\t\"last_name\":\"Admin\",\n\t\"email\":\"{{last_org_admin_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_admin_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{last_org_admin_email}}\",\n\t\"password\":\"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Accept Invite - Logged In - OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Invite OrgOwner - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"email@test.com\",\n \"roles\" : [\"OrgOwner\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Invite OrgAdmin - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"email@test.com\",\n \"roles\" : [\"OrgAdmin\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Invite OrgMember",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_invite_token\", r.security_token);",
											"",
											"pm.environment.set(\"last_invite_id\", r.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											"pm.environment.set(\"last_org_member_email\", \"orgmember\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"{{last_org_member_email}}\",\n \"roles\" : [\"OrgMember\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"wrong_user_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Org\",\n\t\"last_name\":\"Member\",\n\t\"email\":\"email{{$timestamp}}@test.com\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_member_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Org\",\n\t\"last_name\":\"Member\",\n\t\"email\":\"{{last_org_member_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_member_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{last_org_member_email}}\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Accept Invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Invite OrgMember - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"email@test.com\",\n \"roles\" : [\"OrgMember\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Invite BoxOffice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_invite_token\", r.security_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											"pm.environment.set(\"last_boxoffice_email\", \"boxoffice\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"{{last_boxoffice_email}}\",\n \"roles\" : [\"OrgBoxOffice\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgBoxOffice - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"org_boxoffice_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Box\",\n\t\"last_name\":\"Office\",\n\t\"email\":\"{{last_boxoffice_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgBoxOffice - Accept Invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Invite DoorPerson",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_invite_token\", r.security_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
										"exec": [
											"pm.environment.set(\"last_doorperson_email\", \"doorperson\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user_email\": \"{{last_doorperson_email}}\",\n \"roles\" : [\"DoorPerson\"]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"invites"
									]
								}
							},
							"response": []
						},
						{
							"name": "DoorPerson - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"doorperson_token\", json.access_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Door\",\n\t\"last_name\":\"Person\",\n\t\"email\":\"{{last_doorperson_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "DoorPerson - Accept Invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{doorperson_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"invitations"
									],
									"query": [
										{
											"key": "security_token",
											"value": "{{last_invite_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Register and Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should have token response\", function() {",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"",
											"pm.environment.set(\"user_token\", json.access_token);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											"",
											"pm.environment.set(\"last_email\", \"user\" + (new Date()).getTime() + \"@tari.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"User\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Organization",
					"item": [
						{
							"name": "OrgMember -List Orgs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"org should be present\", function() {",
											"    let found = false;",
											"    let org_id = pm.environment.get(\"last_org_id\");",
											"    for (let i=0;i<r.data.length;i++) {",
											"        if (r.data[i].id === org_id){",
											"            found = true;",
											"            break;",
											"        }",
											"    }",
											"    ",
											"    pm.expect(found).to.be.true;",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - List Orgs - Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"orgs should be empty\", function() {",
											"    pm.expect(r.data.length).to.equal(0);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Creates Fee Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be one result\", function(){",
											"    pm.expect(r.ranges.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"should have correct min_price_in_cents\", function(){",
											"    pm.expect(r.ranges[0].min_price_in_cents).to.equal(0);",
											"});",
											"",
											"pm.test(\"should have correct fee_in_cents\", function(){",
											"    pm.expect(r.ranges[0].fee_in_cents).to.equal(10);",
											"});",
											"",
											"pm.environment.set(\"last_fee_schedule_id\", JSON.parse(responseBody).id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Fee_schedule_{{$timestamp}}\",\n\"ranges\": [\n\t{\n\t\t\"min_price_in_cents\": 0,\n\t\t\"company_fee_in_cents\": 4,\n\t\t\"client_fee_in_cents\": 6\n\t}\n]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"fee_schedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Creates Fee Schedule - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Fee_schedule_{{$timestamp}}\",\n\"ranges\": [\n\t{\n\t\t\"min_price_in_cents\": 0,\n\t\t\"company_fee_in_cents\": 4,\n\t\t\"client_fee_in_cents\": 6\n\t}\n]\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"fee_schedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Update Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"state should be CA\", function() {",
											"    pm.expect(r.state).to.equal(\"CA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\" : \"CA\"\n\t\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Update Org - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"state\" : \"CA\"\n\t\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Update Org - edit event fee (TODO: Check this permission)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"pm.test(\"event fee should be set\", function() {",
											"    pm.expect(r.event_fee_in_cents).to.equal(100);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"company_event_fee_in_cents\": 100\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Update Org - edit event fee - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"company_event_fee_in_cents\": 100\n}"
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Get Fee Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be one result\", function(){",
											"    pm.expect(r.ranges.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"should have correct min_price_in_cents\", function(){",
											"    pm.expect(r.ranges[0].min_price_in_cents).to.equal(0);",
											"});",
											"",
											"pm.test(\"should have correct fee_in_cents\", function(){",
											"    pm.expect(r.ranges[0].fee_in_cents).to.equal(10);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"fee_schedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Get Fee Schedule - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"fee_schedule"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Artists",
					"item": [
						{
							"name": "Admin - Create Artist - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"last_artist_id\", JSON.parse(responseBody).id);",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be public\", function() {",
											"   pm.expect(json.is_private).to.be.false; ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Artist {{$timestamp}}\",\n\t\"bio\": \"Artist bio\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Create Artist - Public - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Artist {{$timestamp}}\",\n\t\"bio\": \"Artist bio\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Create Artist - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be private\", function() {",
											"   pm.expect(json.is_private).to.be.true; ",
											"   pm.expect(json.organization_id).to.equal(pm.environment.get(\"last_org_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Artist {{$timestamp}}\",\n\t\"bio\": \"Artist bio\",\n\t\"organization_id\": \"{{last_org_id}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "DoorPerson - Create Artist - Private - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{doorperson_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Artist {{$timestamp}}\",\n\t\"bio\": \"Artist bio\",\n\t\"organization_id\": \"{{last_org_id}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - Search Artist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Artist result should match\",function() {",
											"    let last_artist_id= pm.environment.get(\"last_artist_id\");",
											"    let found = false;",
											"    let json = JSON.parse(responseBody);",
											"    ",
											"    for (let i=0;i<json.data.length; i++) {",
											"        if (json.data[i].id === last_artist_id) {",
											"            found = true;",
											"            break;",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/artists/search?q=Artist&spotify=1",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "Artist"
										},
										{
											"key": "spotify",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - Search Artist Spotify Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"//If data is blank, no spotify key was provided",
											"",
											"",
											"pm.test(\"Spotify result should contain spotify_id or data should be blank\",function() {",
											"    pm.environment.set(\"last_spotify_artist_id\", \"\");",
											"    let data = JSON.parse(responseBody).data;",
											"    if(data.length === 0) {",
											"        postman.setNextRequest(\"Admin - Create Venue - Public\");",
											"    } else {",
											"        data.forEach(item => {",
											"            pm.expect(item.spotify_id).to.not.be.a(\"null\");",
											"            pm.environment.set(\"last_spotify_artist_id\", \"5HFkc3t0HYETL4JeEbDB1v\");",
											"        })    ",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/artists/search?q=Powerwolf&spotify=1",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "Powerwolf"
										},
										{
											"key": "spotify",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Create From Spotify - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"if (pm.environment.get(\"last_spotify_artist_id\") !== \"\") {",
											"    pm.test(\"should be 201\", function() {",
											"        pm.response.to.have.status(201);",
											"    })    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8007340d-4d23-4637-86eb-dfd560cf5063",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"spotify_id\": \"{{last_spotify_artist_id}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"artists"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Venues",
					"item": [
						{
							"name": "Admin - Create Venue - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"last_venue_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Test venue_{{$timestamp}}\",\n\t\"address\": \"1 street street\",\n\t\"city\": \"City\",\n\t\"country\": \"Country\",\n\t\"phone\": \"5555555555\",\n\t\"google_place_id\": null,\n\t\"state\": \"California\",\n\t\"postal_code\": \"23233\",\n\t\"timezone\": \"America/Los_Angeles\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Create Venue - Public - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Test venue_{{$timestamp}}\",\n\t\"address\": \"1 street street\",\n\t\"city\": \"City\",\n\t\"country\": \"Country\",\n\t\"phone\": \"5555555555\",\n\t\"google_place_id\": null,\n\t\"state\": \"California\",\n\t\"postal_code\": \"23233\",\n\t\"timezone\": \"America/Los_Angeles\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Create Venue - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"pm.environment.set(\"private_venue_id\", JSON.parse(responseBody).id);",
											"pm.test(\"should be private\", function() {",
											"    pm.expect(json.is_private).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Test venue_{{$timestamp}}\",\n\t\"address\": \"1 street street\",\n\t\"city\": \"City\",\n\t\"country\": \"Country\",\n\t\"organization_id\": \"{{last_org_id}}\",\n\t\"phone\": \"5555555555\",\n\t\"google_place_id\": null,\n\t\"state\": \"California\",\n\t\"postal_code\": \"23233\",\n\t\"timezone\": \"America/Los_Angeles\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - Create Venue - Private - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Test venue_{{$timestamp}}\",\n\t\"address\": \"1 street street\",\n\t\"city\": \"City\",\n\t\"country\": \"Country\",\n\t\"organization_id\": \"{{last_org_id}}\",\n\t\"phone\": \"5555555555\",\n\t\"google_place_id\": null,\n\t\"state\": \"California\",\n\t\"postal_code\": \"23233\",\n\t\"timezone\": \"America/Los_Angeles\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - List Venues",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											" let r = JSON.parse(responseBody);",
											" ",
											"pm.test(\"created venue should be present\", function() {",
											"    let found = false;",
											"    let last_venue_id = pm.environment.get(\"last_venue_id\");",
											"    for (var i=0;i < r.data.length; i++){",
											"        if (r.data[i].id === last_venue_id) {",
											"            found=true;",
											"            break;",
											"        }",
											"",
											"    }",
											"    pm.expect(found).to.be.true;",
											"  ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/venues",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin  - Update Venue - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91d2787-44e0-489c-9b8c-69a7f118f457",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"fields should be updated\", function() {",
											"    pm.expect(r.address).to.equal(\"address\");",
											"    pm.expect(r.city).to.equal(\"city\");",
											"",
											"    pm.expect(r.country).to.equal(\"the best country\");",
											"",
											"    pm.expect(r.postal_code).to.equal(\"2222\");",
											"    ",
											"    pm.expect(r.state).to.equal(\"CA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"address\",\n    \"city\":\"city\",\n    \"country\" : \"the best country\",\n    \"postal_code\" : \"2222\",\n    \"state\":\"CA\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{last_venue_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{last_venue_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner  - Update Venue - Public - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91d2787-44e0-489c-9b8c-69a7f118f457",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"address\",\n    \"city\":\"city\",\n    \"country\" : \"the best country\",\n    \"postal_code\" : \"2222\",\n    \"state\":\"CA\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{last_venue_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{last_venue_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Stages",
					"item": [
						{
							"name": "OrgMember - Create Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"pm.test(\"should be object\", function() {",
											"    pm.expect(json).to.be.an(\"object\");",
											"    pm.environment.set(\"private_stage_id\",json.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 1\",\n\t\"description\": \"Main Stage for Private Venue\",\n\t\"capacity\": null\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{private_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{private_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Update Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"pm.test(\"should be object\", function() {",
											"    pm.expect(json).to.be.an(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"capacity\": 5000\n}"
								},
								"url": {
									"raw": "http://{{server}}/stages/{{private_stage_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"stages",
										"{{private_stage_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Create Duplicate Stage - 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 409\", function() {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 1\",\n\t\"description\": \"Main Stage for Private Venue\",\n\t\"capacity\": null\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{private_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{private_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgOwner - Create Public Stage - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 1\",\n\t\"description\": \"Main Stage for Private Venue\",\n\t\"capacity\": null\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{last_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{last_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Create Public Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"public_stage_id\", r.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 1\",\n\t\"description\": \"Main Stage for Public Venue\",\n\t\"capacity\": 1000\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{last_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{last_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - List Stages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"let r = JSON.parse(responseBody);",
											"pm.test(\"should have 1 stage\", function() {",
											"    pm.expect(r.data.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"description should be for public venue\", function() {",
											"    pm.expect(r.data[0].description).to.equal(\"Main Stage for Public Venue\");",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 1\",\n\t\"description\": \"Main Stage for Public Venue\",\n\t\"capacity\": 1000\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{last_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{last_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Create Second Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"pm.test(\"should be object\", function() {",
											"    pm.expect(json).to.be.an(\"object\");",
											"    pm.environment.set(\"second_private_stage_id\",json.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 2\",\n\t\"description\": \"Second Stage for Private Venue\",\n\t\"capacity\": 500\n}"
								},
								"url": {
									"raw": "http://{{server}}/venues/{{private_venue_id}}/stages",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"venues",
										"{{private_venue_id}}",
										"stages"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember - Delete Second Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\":\"Stage 2\",\n\t\"description\": \"Second Stage for Private Venue\",\n\t\"capacity\": 500\n}"
								},
								"url": {
									"raw": "http://{{server}}/stages/{{second_private_stage_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"stages",
										"{{second_private_stage_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Events - External",
					"item": [
						{
							"name": "OrgMember  - Create Event That is External",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"external_event_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"is_external\": true,\n    \"external_url\": \"https://www.eventbrite.com/e/why-cloud-why-xero-why-now-johannesburg-limited-seats-tickets-52952818305?aff=ebdshpmoodssection\",\n    \"event_type\": \"Music\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - Create Event That is External - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"is_external\": true,\n    \"external_url\": \"https://www.eventbrite.com/e/why-cloud-why-xero-why-now-johannesburg-limited-seats-tickets-52952818305?aff=ebdshpmoodssection\",\n    \"event_type\": \"Music\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Update External Event To Be Sold Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should have correct fee_in_cents\", function(){",
											"    pm.expect(r.override_status).to.equal(\"SoldOut\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"override_status\": \"SoldOut\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events/{{external_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{external_event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - Update External Event - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"override_status\": \"SoldOut\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events/{{external_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{external_event_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72017d3e-5e1f-4317-8972-255de4c8f7b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51cc8fc3-8248-48ee-8297-0a861e2479f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Events",
					"item": [
						{
							"name": "OrgMember  - Create Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"last_event_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2020-11-13T12:00:00\",\n    \"event_end\": \"2020-11-14T12:00:00\",\n    \"event_type\": \"Music\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Publish Event - Validation Fails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be 422\", function() {",
											"    pm.response.to.have.status(422);",
											"     pm.expect(json.error).to.equal(\"Validation error\");",
											"})",
											"",
											"",
											"pm.test(\"should require promo image url\", function() {",
											"   ",
											"    pm.expect(json.fields[\"promo_image_url\"][0].code).to.equal(\"required\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}/publish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Update Event - Validation Fails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f54eb13-607a-4651-a581-3ce380c3fcbf",
										"exec": [
											"pm.test(\"should be 422\", function() {",
											"    pm.response.to.have.status(422);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"pm.test(\"Error field should be event.event_end\", function() {",
											"    pm.expect(r.fields).to.have.keys([\"event.event_end\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"age_limit\": 18,\n    \"promo_image_url\": \"http://localhost/noimg.png\",\n    \"event_end\": \"2020-11-12T12:00:00\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Update Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f54eb13-607a-4651-a581-3ce380c3fcbf",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_event_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"age_limit\": 18,\n    \"promo_image_url\": \"http://localhost/noimg.png\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Publish Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}/publish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Add Artist To Event - With Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"artist_id\": \"{{last_artist_id}}\",\n\t\"rank\": 0,\n\t\"importance\": 0,\n\t\"set_time\": null,\n\t\"stage_id\": \"{{public_stage_id}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}/artists",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}",
										"artists"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Create Event Invalid Event Type - 5XX",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 400\", function() {",
											"    pm.response.to.have.status(400);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party - To Un-Publish\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2020-11-13T12:00:00\",\n    \"publish_date\": \"2019-01-01T00:00:00\",\n    \"promo_image_url\": \"http://localhost/noimg.png\",\n    \"event_type\": \"InvalidEventType\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Create Event To Un-Publish",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"",
											"pm.environment.set(\"unpublish_event_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party - To Un-Publish\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2020-11-13T12:00:00\",\n    \"publish_date\": \"2019-01-01T00:00:00\",\n    \"promo_image_url\": \"http://localhost/noimg.png\",\n    \"event_type\": \"Conference\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Publish Event To Un-Publish",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{unpublish_event_id}}/publish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{unpublish_event_id}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Un-Publish Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{unpublish_event_id}}/unpublish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{unpublish_event_id}}",
										"unpublish"
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Un-Publish Un-Published Event - 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 422\", function() {",
											"    pm.response.to.have.status(422);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{unpublish_event_id}}/unpublish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{unpublish_event_id}}",
										"unpublish"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice  - Publish Event - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/events/{{last_event_id}}/publish",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events",
										"{{last_event_id}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - search for events - Upcoming",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be more than 2 results\", function(){",
											"    pm.expect(r.data.length).to.greaterThan(1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=upcoming",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"events"
									],
									"query": [
										{
											"key": "past_or_upcoming",
											"value": "upcoming"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - search for events - Past - No results",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be empty\", function(){",
											"    pm.expect(r.data.length).to.equal(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=past",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"events"
									],
									"query": [
										{
											"key": "past_or_upcoming",
											"value": "past"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgMember  - Create Event in Past",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2018-11-13T12:00:00\",\n    \"event_end\": \"2018-11-14T12:00:00\",\n    \"event_type\": \"Music\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/events",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "BoxOffice - search for events - Past",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"let r = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be one result\", function(){",
											"    pm.expect(r.data.length).to.equal(1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_boxoffice_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=Past",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"organizations",
										"{{last_org_id}}",
										"events"
									],
									"query": [
										{
											"key": "past_or_upcoming",
											"value": "Past"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OrgMember - create tickets - Default pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);",
									"",
									"pm.environment.set(\"default_ticket_type_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Default_Pricing_{{$timestamp}}\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": 2500,\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - update tickets - Default pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"start_date\":\"1999-02-01T02:22:00\",\n\t\"end_date\": \"8999-01-10T02:22:00\",\n\t\"price_in_cents\": 3000\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types/{{default_ticket_type_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types",
								"{{default_ticket_type_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create tickets - VIP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);",
									"",
									"pm.environment.set(\"vip_ticket_type_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"VIP_{{$timestamp}}\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": 2500,\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Test_{{$timestamp}}\",\n\t\"price_in_cents\": 3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}, {\n\t\t\t\"name\": \"Test_{{$timestamp}}_late_bird\",\n\t\"price_in_cents\": 4000,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create tickets - fail negative pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422); // Unprocessable Entity",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have correct fields errors\", function() {",
									"    pm.expect(r.fields[\"ticket_pricing.price_in_cents\"].length).to.equal(1);",
									"    pm.expect(r.fields[\"ticket_pricing.price_in_cents\"][0].code).to.equal(\"number_must_be_positive\");",
									"    pm.expect(r.fields[\"ticket_pricing.price_in_cents\"][0].message.length).to.be.greaterThan(0);",
									"    ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"VIP_{{$timestamp}}_{{$randomInt}}\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": -3000,\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Test_{{$timestamp}}\",\n\t\"price_in_cents\": -3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}, {\n\t\t\t\"name\": \"Test_{{$timestamp}}_late_bird\",\n\t\"price_in_cents\": -4000,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create tickets - VIP - Box office Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"VIP_{{$timestamp}}_With_Box_Office\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": 2500,\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Test_{{$timestamp}}\",\n\t\"price_in_cents\": 3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}, {\n\t\t\t\"name\": \"Test_{{$timestamp}}_late_bird\",\n\t\"price_in_cents\": 4000,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t},\n\t{\n\t\t\t\"name\": \"Test_{{$timestamp}}_box_office_only\",\n\t\"price_in_cents\": 8000,\n\t\"is_box_office_only\": true,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create tickets - fails due to validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have validation error\", function(){",
									"    pm.expect(r.error).to.equal(\"Validation error\");",
									"    ",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"].length).to.equal(1);",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].code).to.equal(\"ticket_pricing_overlapping_ticket_type_end_date\");",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].message).to.equal(\"Ticket pricing dates overlap ticket type end date\");",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].params.end_date).to.equal(\"2022-02-01T02:22:00\");",
									"    ",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"].length).to.equal(1);",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].code).to.equal(\"ticket_pricing_overlapping_ticket_type_start_date\");",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].message).to.equal(\"Ticket pricing dates overlap ticket type start date\");",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].params.start_date).to.equal(\"1981-02-01T02:22:00\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"General Admission_{{$timestamp}}\",\n\t\"capacity\": 1000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2021-01-10T02:22:00\",\n\t\"price_in_cents\": 3000,\n\t\"limit_per_person\": 50,\n\t\"ticket_pricing\":[\n\t\t{\n\t\t\t\"name\": \"Standard\",\n\t\t\t\"price_in_cents\": 3000,\n\t\t\t\"start_date\":\"1981-02-01T02:22:00\",\n\t\t\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create tickets - GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);",
									"",
									"pm.environment.set(\"ga_ticket_type_id\", JSON.parse(responseBody).id);",
									"pm.environment.set(\"ticket_limit_above_max\", 51);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"General Admission_{{$timestamp}}\",\n\t\"capacity\": 1000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": 2500,\n\t\"limit_per_person\": 50,\n\t\"ticket_pricing\":[{\n\t\t\"name\": \"Standard\",\n\t\t\"price_in_cents\": 3000,\n\t\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\t\"end_date\": \"2022-02-01T02:22:00\"\n\t},\n\t{\n\t\t\"name\": \"Test_{{$timestamp}}_box_office_only\",\n\t\t\"price_in_cents\": 4000,\n\t\t\"is_box_office_only\": true,\n\t\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\t\"end_date\": \"9999-01-10T02:22:00\"\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create tickets - GA for cancellation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"tickets_to_cancel\", JSON.parse(responseBody).id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"General Admission2_{{$timestamp}}\",\n\t\"capacity\": 1000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"price_in_cents\": 2500,\n\t\"limit_per_person\": 50,\n\t\"ticket_pricing\":[{\n\t\t\"name\": \"Standard\",\n\t\t\"price_in_cents\": 3000,\n\t\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\t\"end_date\": \"2022-02-01T02:22:00\"\n\t},\n\t{\n\t\t\"name\": \"Test_{{$timestamp}}_box_office_only\",\n\t\t\"price_in_cents\": 4000,\n\t\t\"is_box_office_only\": true,\n\t\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\t\"end_date\": \"9999-01-10T02:22:00\"\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - cancel tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types/{{tickets_to_cancel}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types",
								"{{tickets_to_cancel}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - check tickets cancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"r.data.forEach(function(val) {",
									"    if (val.id == pm.variables.get(\"tickets_to_cancel\")) {",
									"        tests[\"ticket should be cancelled\"] = val.status == \"Cancelled\";",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Codes",
			"item": [
				{
					"name": "OrgMember - create discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_code_id\", json.id);",
									"pm.environment.set(\"discount_redemption_code\", json.redemption_code);",
									"",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Discount Tickets\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.code_type).to.equal(\"Discount\");",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2059-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Discount Tickets\",\n\t\"code_type\" : \"Discount\",\n\t\"redemption_code\" : \"RedeemDiscountCode{{$timestamp}}\",\n\t\"max_uses\" : 10,\n\t\"discount_in_cents\" : 100,\n\t\"start_date\": \"2018-01-01T12:00:00\",\n\t\"end_date\": \"2059-01-01T12:00:00\",\n\t\"max_tickets_per_user\" : 10,\n\t\"ticket_type_ids\": [\"{{last_ticket_type_id}}\"]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - update discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"New Discount Name\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2059-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\t\"name\" : \"New Discount Name\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - list discounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?query=discount",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "query",
									"value": "discount"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - list all codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5204",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - read discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"New Discount Name\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2059-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - view event tickets with discount code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"let access_code = pm.environment.get(\"discount_redemption_code\");",
									"pm.test(\"should have discount applied\", function() {",
									"   pm.expect(r.ticket_types[1].redemption_code).to.equal(access_code);",
									"   pm.expect(r.ticket_types[1].ticket_pricing.discount_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have normal pricing\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.price_in_cents).to.equal(3000);",
									"    pm.expect(r.ticket_types[0].ticket_pricing.discount_in_cents).to.equal(0);",
									"});",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}?redemption_code={{discount_redemption_code}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							],
							"query": [
								{
									"key": "redemption_code",
									"value": "{{discount_redemption_code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_code_id\", json.id);",
									"pm.environment.set(\"access_redemption_code\", json.redemption_code);",
									"",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Access Tickets\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.code_type).to.equal(\"Access\");",
									"    pm.expect(json.discount_in_cents).to.equal(null);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2059-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Access Tickets\",\n\t\"code_type\" : \"Access\",\n\t\"redemption_code\" : \"AccessDiscountCode{{$timestamp}}\",\n\t\"max_uses\" : 10,\n\t\"discount_in_cents\" : null,\n\t\"start_date\": \"2018-01-01T12:00:00\",\n\t\"end_date\": \"2059-01-01T12:00:00\",\n\t\"max_tickets_per_user\" : 10,\n\t\"ticket_type_ids\": [\"{{last_ticket_type_id}}\"]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - list all discount codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?type=Discount",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "type",
									"value": "Discount"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - list all access codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"access should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"Access Tickets\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?type=Access",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "type",
									"value": "Access"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - view event tickets no code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have non access gated ticket types\", function() {",
									"   pm.expect(r.ticket_types.length).to.equal(3); ",
									"});",
									"",
									"pm.test(\"should have normal pricing\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.price_in_cents).to.equal(3000);",
									"    pm.expect(r.ticket_types[0].ticket_pricing.discount_in_cents).to.equal(0);",
									"});",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - view event tickets with access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"let access_code = pm.environment.get(\"access_redemption_code\");",
									"pm.test(\"should have access gated ticket type\", function() {",
									"   pm.expect(r.ticket_types.length).to.equal(4); ",
									"   pm.expect(r.ticket_types[1].redemption_code).to.equal(access_code);",
									"});",
									"",
									"pm.test(\"should have normal pricing\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.price_in_cents).to.equal(3000);",
									"    pm.expect(r.ticket_types[0].ticket_pricing.discount_in_cents).to.equal(0);",
									"});",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}?redemption_code={{access_redemption_code}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							],
							"query": [
								{
									"key": "redemption_code",
									"value": "{{access_redemption_code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - destroy discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - list discounts after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"codes should only return 1 item\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Holds",
			"item": [
				{
					"name": "OrgMember - create hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"pm.environment.set(\"last_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Musician Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Discount\",\n\t\"redemption_code\" : \"Yeaaaah{{$timestamp}}\",\n\t\"discount_in_cents\" : 100,\n\t\"end_at\": \"2019-01-01T12:00:00\",\n\t\"max_per_order\" : 10,\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - split hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"",
									"pm.environment.set(\"last_split_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Musician Tickets2{{$timestamp}}\",\n\t\"hold_type\":\"Discount\",\n\t\"redemption_code\" : \"Yeaaaah2{{$timestamp}}\",\n\t\"discount_in_cents\" : 100,\n\t\"end_at\": \"2019-01-01T12:00:00\",\n\t\"max_per_order\" : 10,\n\t\"quantity\" : 30\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/split",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"split"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - delete hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_split_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_split_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - add tickets to hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : 10\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - remove tickets remove hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c92a6ff-f31d-4dd9-8839-03da430de734",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : 5\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BoxOffice - list holds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - read hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comp Holds",
			"item": [
				{
					"name": "OrgMember - create comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"pm.environment.set(\"last_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Event Comp Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Comp\",\n\t\"redemption_code\" : \"Comps{{$timestamp}}\",\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - add comps to comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.email).to.equal(\"michael-davidson@tari.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce8bf578-46bd-4ebb-89e0-3e1cd92034b7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Michael Davidson\",\n\t\"email\": \"michael-davidson@tari.com\",\n\t\"phone\":\"111-111-1111\",\n\t\"quantity\": 15,\n\t\"redemption_code\": \"MIKETIX{{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - get comps from comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.data[0].name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.data[0].phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.data[0].email).to.equal(\"michael-davidson@tari.com\");",
									"    pm.expect(json.data[0].quantity).to.equal(15);",
									"});",
									"",
									"pm.environment.set(\"last_comp_id\", json.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - get comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.email).to.equal(\"michael-davidson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(15);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - update comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Robinson\");",
									"    pm.expect(json.phone).to.equal(\"222-222-2222\");",
									"    pm.expect(json.email).to.equal(\"michael-robinson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Michael Robinson\",\n\t\"email\": \"michael-robinson@tari.com\",\n\t\"phone\":\"222-222-2222\",\n\t\"quantity\": 5\n}"
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - get comp after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Robinson\");",
									"    pm.expect(json.phone).to.equal(\"222-222-2222\");",
									"    pm.expect(json.email).to.equal(\"michael-robinson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - destroy comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - get comp after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - get comps from comp hold after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should not be present\", function(){",
									"    pm.expect(json.data.length).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - create comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_hold_id\", r.id);",
									"",
									"pm.environment.set(\"last_redemption_code\", r.redemption_code);",
									"",
									"pm.test(\"quantity should be correct\", function() {",
									"    pm.expect(r.quantity).to.equal(30);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Event Comp Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Comp\",\n\t\"redemption_code\" : \"Comps2{{$timestamp}}\",\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - get redemption code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"data should be present\", function(){",
									"    pm.expect(json.redemption_code).to.equal(pm.environment.get(\"last_redemption_code\"));",
									"    pm.expect(json.hold_type).to.equal(\"Comp\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/redemption_codes/{{last_redemption_code}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"redemption_codes",
								"{{last_redemption_code}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart - redemption code Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(30);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(0);",
									"    ",
									"    pm.expect(json.items[0].redemption_code).to.equal(pm.environment.get(\"last_redemption_code\"));",
									"   ",
									"});",
									"",
									"pm.test(\"should have no per item or event fees\", function(){",
									"    pm.expect(json.items.length).to.equal(1);",
									"  ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"redemption_code\": \"{{last_redemption_code}}\",\n\"quantity\":30\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart - redemption code - too many fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"error should be present\", function(){",
									"    pm.expect(json.fields.quantity[0].code).to.equal(\"Could not reserve the correct amount of tickets\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"redemption_code\": \"{{last_redemption_code}}\",\n\"quantity\":31\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(30);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(0);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - free checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 0,\n\t\"method\": {\n\t\t\"type\" : \"Free\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"30 tickets should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(30);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets - Setup",
			"item": [
				{
					"name": "Guest - search for event - Past",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events?past_or_upcoming=past",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "past"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - search for event - Upcoming",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events?past_or_upcoming=upcoming",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "upcoming"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - view event tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have normal pricing\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - register without optional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"noname{{$timestamp}}@localhost\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/register",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/register",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(27190);",
									"});",
									"",
									"pm.test(\"should be only 1 ticket_type with a limit\", function() {",
									"   pm.expect(json.limited_tickets_remaining.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"should report 48 remaining tickets available\", function() {",
									"    pm.expect(json.limited_tickets_remaining[0].tickets_remaining).to.equal(48);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":2\n}, {\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":7\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should no longer be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart GA and VIP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items.length).to.equal(5);",
									"    ",
									"    // these are tested properly in later calls",
									"   ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(27190);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":2\n}, {\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":7\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.expect(json.items[0].ticket_type_id).to.equal(pm.environment.get(\"ga_ticket_type_id\"));",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									"",
									"pm.test(\"should report 30 remaining tickets available\", function() {",
									"    pm.expect(json.limited_tickets_remaining[0].tickets_remaining).to.equal(30);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":20\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should not be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"    ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": []\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add more than limit to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\": {{ticket_limit_above_max}}\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - remove all from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should not be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":0\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add some more to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[1].quantity).to.equal(4);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(12140);",
									"})",
									"",
									"pm.test(\"should report 46 remaining tickets available\", function() {",
									"    pm.expect(json.limited_tickets_remaining[0].tickets_remaining).to.equal(46);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":4\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(12140);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - remove from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(3110);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":1\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(3110);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets - Stripe",
			"item": [
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should no longer be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.expect(json.items[0].ticket_type_id).to.equal(pm.environment.get(\"ga_ticket_type_id\"));",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									"",
									"pm.test(\"should report 30 remaining tickets available\", function() {",
									"    pm.expect(json.limited_tickets_remaining[0].tickets_remaining).to.equal(30);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":20\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 60300,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": false,\n\t\t\"set_default\": true\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"1 ticket should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(20);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets - Globee",
			"item": [
				{
					"name": "Guest - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should no longer be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.expect(json.items[0].ticket_type_id).to.equal(pm.environment.get(\"ga_ticket_type_id\"));",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":20\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 60300,\n\t\"method\": {\n\t\t\"type\" : \"Provider\",\n\t\t\"provider\": \"globee\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Globee - IPN",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"ZbWyAR2VwO4a3BYN063nJ7\",\n    \"status\": \"paid\",\n    \"total\": \"603.00\",\n    \"adjusted_total\": \"603.00\",\n    \"currency\": \"USD\",\n    \"custom_payment_id\": \"{{last_cart_id}}\",\n    \"custom_store_reference\": null,\n    \"callback_data\": null,\n    \"customer\": {\n        \"name\": null,\n        \"email\": \"mike1547729521787@tari.com\"\n    },\n    \"payment_details\": {\n        \"currency\": \"BTC\",\n        \"received_amount\": \"603.00\",\n        \"received_difference\": \"0\"\n    },\n    \"redirect_url\": \"https://test.globee.com/payment-request/ZbWyAR2VwO4a3BYN063nJ7\",\n    \"success_url\": null,\n    \"cancel_url\": null,\n    \"ipn_url\": \"https://f7dac315.ngrok.io/ipns/globee\",\n    \"notification_email\": null,\n    \"confirmation_speed\": \"medium\",\n    \"expires_at\": \"2019-01-17 13:07:13\",\n    \"created_at\": \"2019-01-17 12:52:13\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/ipns/globee",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"ipns",
								"globee"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets Saved Method",
			"item": [
				{
					"name": "Guest - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": true,\n\t\t\"set_default\": true\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - check saved methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have stripe saved\", function(){",
									"    pm.expect(json[0].name).to.be.equal(\"stripe\");",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/payment_methods",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"payment_methods"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order saved method testing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order saved payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - checkout new order saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"PaymentMethod\",\n\t\t\"provider\": \"stripe\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - checkout new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"PaymentMethod\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    let length = json.data.length;",
									"    pm.expect(length).to.equal(6);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transfer Tickets",
			"item": [
				{
					"name": "Via QR",
					"item": [
						{
							"name": "Guest - register and login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											"pm.test(\"should have token response\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json).to.have.property(\"access_token\");",
											"\tpm.expect(json).to.have.property(\"refresh_token\");",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"user_token\", json.access_token);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
										"exec": [
											"",
											"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - add to cart new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"last_cart_id\", json.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":6\n}]}"
								},
								"url": {
									"raw": "http://{{server}}/cart",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Do STRIPE form post new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf1ae8f4-683d-4b15-8362-773405313887",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"pm.environment.set(\"last_credit_card_token\", json.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "https://checkout.stripe.com"
									},
									{
										"key": "accept-encoding",
										"value": "gzip, deflate, br"
									},
									{
										"key": "accept-language",
										"value": "en-GB"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
									},
									{
										"key": "content-type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "referer",
										"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
									},
									{
										"key": "authority",
										"value": "api.stripe.com"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "test%40test.com",
											"type": "text"
										},
										{
											"key": "validation_type",
											"value": "card",
											"type": "text"
										},
										{
											"key": "payment_user_agent",
											"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "referrer",
											"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
											"type": "text"
										},
										{
											"key": "card[number]",
											"value": "4242424242424242",
											"type": "text"
										},
										{
											"key": "card[exp_month]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "card[exp_year]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "card[cvc]",
											"value": "001",
											"type": "text"
										},
										{
											"key": "card[name]",
											"value": "test%40test.com",
											"type": "text"
										},
										{
											"key": "time_on_page",
											"value": "51111",
											"type": "text",
											"disabled": true
										},
										{
											"key": "guid",
											"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
											"type": "text",
											"disabled": true
										},
										{
											"key": "muid",
											"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sid",
											"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
											"type": "text",
											"disabled": true
										},
										{
											"key": "key",
											"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://api.stripe.com/v1/tokens",
									"protocol": "https",
									"host": [
										"api",
										"stripe",
										"com"
									],
									"path": [
										"v1",
										"tokens"
									]
								},
								"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
							},
							"response": []
						},
						{
							"name": "User - checkout new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.environment.set(\"last_cart_id\", JSON.parse(responseBody).id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"amount\": 18160,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": false,\n\t\t\"set_default\": false\n\t}\n}"
								},
								"url": {
									"raw": "http://{{server}}/cart/checkout",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"cart",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Get tickets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78dae9d8-c586-4bec-876e-ac1d7a55dbc9",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"ticket1_id\", json.data[0][1][0].id);",
											"pm.environment.set(\"ticket2_id\", json.data[0][1][1].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Tickets - Authorize Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa09a71a-5451-49e9-a771-bf1949cc318e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"transfer_transfer_key\", json.transfer_key);",
											"pm.environment.set(\"transfer_sender_user_id\", json.sender_user_id);",
											"pm.environment.set(\"transfer_num_tickets\", json.num_tickets);",
											"pm.environment.set(\"transfer_signature\", json.signature);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket1_id}}\",\n\t\t\"{{ticket2_id}}\"],\n\t\t\"validity_period_in_seconds\":3600\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/transfer",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest - Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7fd9d58-97c7-497f-a26c-6425e4d346b0",
										"exec": [
											"",
											"pm.environment.set(\"last_email2\", \"john\" + (new Date()).getTime() + \"@tari.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"John\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email2}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users/register",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest (User2) - login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c88075b1-daa2-4141-a9fe-44fe68f4e7a8",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"user2_token\", json.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{last_email2}}\", \"password\":\"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - Tickets - Receive Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b8fa947-f6d6-440b-8377-5bd2a5aab067",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user2_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transfer_key\": \"{{transfer_transfer_key}}\",\n    \"sender_user_id\": \"{{transfer_sender_user_id}}\",\n    \"num_tickets\": {{transfer_num_tickets}},\n    \"signature\": \"{{transfer_signature}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/receive",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"receive"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Tickets - Index - Should not include sent tickets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e788041-0bf2-46b8-98b1-79447957b3f3",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should not include sent tickets\", function() {",
											"    var ticket1 = pm.environment.get(\"ticket1_id\");",
											"    var ticket2 = pm.environment.get(\"ticket2_id\");",
											"    for(var i =0;i<json.data[0][1].length;i++) {",
											"        if (json.data[0][1][i].id === ticket1 || json.data[0][1][i].id === ticket2) {",
											"            assert.fail(\"User still has ticket that was transferred\");",
											"        }",
											"    }",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Via Email/SMS",
					"item": [
						{
							"name": "User - Ticket - Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78dae9d8-c586-4bec-876e-ac1d7a55dbc9",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"ticket1_id\", json.data[0][1][0].id);",
											"pm.environment.set(\"ticket2_id\", json.data[0][1][1].id);",
											"pm.environment.set(\"ticket3_id\", json.data[0][1][2].id);",
											"pm.environment.set(\"ticket4_id\", json.data[0][1][3].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Tickets - Authorize Transfer - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2ed9bb-ca51-4f0f-bfc5-ba78924b1833",
										"exec": [
											"pm.test(\"should be 422\", function() {",
											"    pm.response.to.have.status(422);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket3_id}}\",\n\t\t\"{{ticket4_id}}\"],\n\t\"email_or_phone\": \"1234567\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/send",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Tickets - Authorize Transfer - Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2ed9bb-ca51-4f0f-bfc5-ba78924b1833",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket1_id}}\",\n\t\t\"{{ticket2_id}}\"],\n\t\"email_or_phone\": \"test@test.com\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/send",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "User - Tickets - Authorize Transfer - SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2ed9bb-ca51-4f0f-bfc5-ba78924b1833",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket3_id}}\",\n\t\t\"{{ticket4_id}}\"],\n\t\"email_or_phone\": \"27725084284\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/send",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"send"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Refund Tickets",
			"item": [
				{
					"name": "Guest - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.environment.set(\"last_cart_id\", JSON.parse(responseBody).id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": false,\n\t\t\"set_default\": false\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - view order details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"no tickets from other organizations\", function(){",
									"    pm.expect(json.order_contains_tickets_for_other_organizations).to.equal(false);",
									"});",
									"",
									"pm.test(\"correct number of order items\", function(){",
									"    pm.expect(json.items.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].ticket_price_in_cents).to.equal(3000);",
									"    pm.expect(json.items[0].fees_price_in_cents).to.equal(10);",
									"    pm.expect(json.items[0].total_price_in_cents).to.equal(3010);",
									"    pm.expect(json.items[0].status).to.equal('Purchased');",
									"    pm.expect(json.items[0].refundable).to.equal(true);",
									"    pm.environment.set(\"ticket_instance_id\", json.items[0].ticket_instance_id);",
									"    pm.environment.set(\"order_item_id\", json.items[0].order_item_id);",
									"    ",
									"    pm.expect(json.items[1].ticket_price_in_cents).to.equal(3000);",
									"    pm.expect(json.items[1].fees_price_in_cents).to.equal(10);",
									"    pm.expect(json.items[1].total_price_in_cents).to.equal(3010);",
									"    pm.expect(json.items[1].status).to.equal('Purchased');",
									"    pm.expect(json.items[1].refundable).to.equal(true);",
									"    pm.environment.set(\"ticket_instance_id2\", json.items[1].ticket_instance_id);",
									"});",
									"",
									"pm.test(\"event fees should be present\", function(){",
									"    pm.expect(json.items[2].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[2].fees_price_in_cents).to.equal(100);",
									"    pm.expect(json.items[2].total_price_in_cents).to.equal(100);",
									"    pm.expect(json.items[2].status).to.equal('Purchased');",
									"    pm.expect(json.items[2].refundable).to.equal(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}/details",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - refund one ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"no tickets from other organizations\", function(){",
									"    pm.expect(json.amount_refunded).to.equal(3010);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"order_item_id\": \"{{order_item_id}}\",\n\"ticket_instance_id\": \"{{ticket_instance_id}}\"\n}]\n}"
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}/refund",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - view order details after ticket refunded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"no tickets from other organizations\", function(){",
									"    pm.expect(json.order_contains_tickets_for_other_organizations).to.equal(false);",
									"});",
									"",
									"pm.test(\"correct number of order items\", function(){",
									"    pm.expect(json.items.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].fees_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].total_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].status).to.equal('Refunded');",
									"    pm.expect(json.items[0].refundable).to.equal(false);",
									"    ",
									"    pm.expect(json.items[1].ticket_price_in_cents).to.equal(3000);",
									"    pm.expect(json.items[1].fees_price_in_cents).to.equal(10);",
									"    pm.expect(json.items[1].total_price_in_cents).to.equal(3010);",
									"    pm.expect(json.items[1].status).to.equal('Purchased');",
									"    pm.expect(json.items[1].refundable).to.equal(true);",
									"});",
									"",
									"pm.test(\"event fees should be present\", function(){",
									"    pm.expect(json.items[2].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[2].fees_price_in_cents).to.equal(100);",
									"    pm.expect(json.items[2].total_price_in_cents).to.equal(100);",
									"    pm.expect(json.items[2].status).to.equal('Purchased');",
									"    pm.expect(json.items[2].refundable).to.equal(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}/details",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - refund remaining ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"no tickets from other organizations\", function(){",
									"    pm.expect(json.amount_refunded).to.equal(3110);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"order_item_id\": \"{{order_item_id}}\",\n\"ticket_instance_id\": \"{{ticket_instance_id2}}\"\n}]\n}"
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}/refund",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - view order details all refunded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"no tickets from other organizations\", function(){",
									"    pm.expect(json.order_contains_tickets_for_other_organizations).to.equal(false);",
									"});",
									"",
									"pm.test(\"correct number of order items\", function(){",
									"    pm.expect(json.items.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].fees_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].total_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[0].status).to.equal('Refunded');",
									"    pm.expect(json.items[0].refundable).to.equal(false);",
									"    ",
									"    pm.expect(json.items[1].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[1].fees_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[1].total_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[1].status).to.equal('Refunded');",
									"    pm.expect(json.items[1].refundable).to.equal(false);",
									"});",
									"",
									"pm.test(\"event fees should be present\", function(){",
									"    pm.expect(json.items[2].ticket_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[2].fees_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[2].total_price_in_cents).to.equal(0);",
									"    pm.expect(json.items[2].status).to.equal('Refunded');",
									"    pm.expect(json.items[2].refundable).to.equal(false);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}/details",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}",
								"details"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "My orders",
			"item": [
				{
					"name": "User - Current Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_user_id\", json.user.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/me",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - My Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data[0].items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.data[0].items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"",
									"pm.environment.set(\"last_order_id\", json.data[0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a10ac6c-523b-43ac-b5d4-5bea60b5618b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_order_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_order_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Redeeming",
			"item": [
				{
					"name": "OrgMember - Get Guest List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"guests should be present\", function(){",
									"    pm.expect(json.data.length).to.be.greaterThan(10);",
									"    pm.environment.set(\"last_ticket_instance_id\", json.data[0].id);",
									"    pm.environment.set(\"last_ticket_instance_redeem_key\", json.data[0].redeem_key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/guests?query=",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"guests"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - Checkin Event List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"There should be 1 event that Admin can checkin\", function() {",
									"    pm.expect(json.data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/checkins",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"checkins"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - Redeem Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"ID should be last_ticket_instance_id\", function() {",
									"    pm.expect(json.id).to.equal(pm.environment.get(\"last_ticket_instance_id\"));",
									"});",
									"pm.test(\"Data should be an object and not have an error key\", function() {",
									"    pm.expect(json).to.be.an('object');",
									"    pm.expect(json.hasOwnProperty(\"error\")).to.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"redeem_key\": \"{{last_ticket_instance_redeem_key}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/redeem/{{last_ticket_instance_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"redeem",
								"{{last_ticket_instance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - Redeem Duplicate Ticket Should Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 409\", function() {",
									"    pm.response.to.have.status(409);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"Response should include error key\", function() {",
									"    pm.expect(json).to.be.an(\"object\");",
									"    pm.expect(json.error).to.be.an(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"redeem_key\": \"{{last_ticket_instance_redeem_key}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/redeem/{{last_ticket_instance_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"redeem",
								"{{last_ticket_instance_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Box Office",
			"item": [
				{
					"name": "Box Office - View Event Tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have box office pricing\", function(){",
									"    pm.expect(r.ticket_types[1].ticket_pricing.price_in_cents).to.equal(4000);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[1].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}?box_office_pricing=true",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							],
							"query": [
								{
									"key": "box_office_pricing",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_box_office_order_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(4000);",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(8120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"items\": [{\n\t\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\t\"quantity\":2\n\t}],\n\t\"box_office_pricing\": true\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Update order note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Note should be updated\", function() {",
									"    pm.expect(json.note).to.equal(\"Client to collect after 5pm\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\t\"note\" : \"Client to collect after 5pm\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_box_office_order_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_box_office_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Do External Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be paid\", function() {",
									"    pm.expect(json.status).to.equal(\"Paid\");",
									"    pm.environment.set(\"last_box_office_user_id\", json.user_id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 12140,\n\t\"method\": {\n\t\t\"type\" : \"External\",\n\t\t\"reference\": \"INV{{$timestamp}}\",\n\t\t\"first_name\" : \"Name{{$timestamp}}\",\n\t\t\"last_name\" : \"LastName{{$timestamp}}\",\n\t\t\"email\" : \"email{{$timestamp}}@test.com\",\n\t\t\"note\" : \"Tada\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Show tickets for order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.length).to.equal(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_box_office_order_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_box_office_order_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order (Existing User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_box_office_order_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(4000);",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(8120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"items\": [{\n\t\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\t\"quantity\":2\n\t}],\n\t\"box_office_pricing\": true\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Do External Payment (Existing User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be paid\", function() {",
									"    pm.expect(json.status).to.equal(\"Paid\");",
									"    pm.environment.set(\"last_box_office_user_id\", json.user_id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 12140,\n\t\"method\": {\n\t\t\"type\" : \"External\",\n\t\t\"reference\": \"INV{{$timestamp}}\",\n\t\t\"first_name\" : \"Name{{$timestamp}}\",\n\t\t\"last_name\" : \"LastName{{$timestamp}}\",\n\t\t\"email\" : \"{{last_email}}\",\n\t\t\"note\" : \"Tada\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - My Orders (For On Behalf Of)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data[0].items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.data[0].items[0].unit_price_in_cents).to.equal(4000);",
									"});",
									"",
									"",
									"pm.test(\"box office order should be present\", function(){",
									"    let found = false;",
									"    for(let i=0;i<json.data.length;i++) {",
									"        if (json.data[i].id===pm.environment.get(\"last_box_office_order_id\")) {",
									"            found = true;",
									"        }",
									"    }",
									"    ",
									"    pm.expect(found).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order over limit for single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":51\n}],\n\t\"box_office_pricing\": true\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order that would be over limit due to previous orders if  not for on behalf of other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_boxoffice_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":49\n}],\n\t\"box_office_pricing\": true\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashboards",
			"item": [
				{
					"name": "Guest - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.id);",
									"pm.environment.set(\"last_user_id\", json.user_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.environment.set(\"last_cart_id\", JSON.parse(responseBody).id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": false,\n\t\t\"set_default\": false\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - View Event Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/dashboard",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - View Fans Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"fans should be present\", function(){",
									"    pm.expect(json.data.length).to.be.greaterThan(3);",
									"});",
									"",
									"pm.test(\"last user fan data should be present\", function(){",
									"    let user_id = pm.environment.get(\"last_user_id\");",
									"    let found = false;",
									"    for(let i=0; i< json.data.length;i++) {",
									"        if (json.data[i].user_id === user_id ){",
									"            found = true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans?page=0&limit=10&sort=Email&dir=Asc",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "Email"
								},
								{
									"key": "dir",
									"value": "Asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - View Fan Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"user should be present\", function(){",
									"    pm.expect(json.first_name).to.equal(\"Mike\");",
									"    pm.expect(json.last_name).to.equal(\"Surname\");",
									"    pm.expect(json.facebook_linked).to.equal(false);",
									"    pm.expect(json.event_count).to.equal(1);",
									"    pm.expect(json.thumb_profile_pic_url).to.equal(null);",
									"    pm.expect(json.cover_photo_url).to.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans/{{last_user_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans",
								"{{last_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - View Fan Page History",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"orders should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"orders should have correct information\", function(){",
									"    // Refunded order",
									"    pm.expect(json.data[0].revenue_in_cents).to.equal(6120);",
									"    pm.expect(json.data[0].event_name).to.equal(\"It's my party\");",
									"    pm.expect(json.data[0].ticket_sales).to.equal(2);",
									"    pm.expect(json.data[0].type).to.equal(\"Purchase\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans/{{last_user_id}}/history",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans",
								"{{last_user_id}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - View Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.expect(json.items.length).to.equal(3);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_cart_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgAdmin - Event Fans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8670e2d0-ee94-47ca-ba7f-4cd0854c4203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"const items = json.data;",
									"",
									"pm.test(\"fans should be present\", function() {",
									"    pm.expect(items.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"last user fan data should be present\", function() {",
									"    let user_id = pm.environment.get(\"last_user_id\");",
									"    pm.expect(items.map(function(d) { return d.user_id; })).to.include(user_id);",
									"    pm.expect(items.map(function(d) { return d.first_name; })).to.include(\"Mike\");",
									"    pm.expect(items.map(function(d) { return d.last_name; })).to.include(\"Surname\");",
									"});",
									"",
									"pm.test(\"fans should not be duplicated\", function() {",
									"    const instanceCounts = items.map(function(d) { return items.filter(function(dd) { return dd.user_id == d.user_id; }).length; });",
									"    pm.expect(instanceCounts.every(function(d) { return d === 1; })).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/fans",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"fans"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Accounts",
			"item": [
				{
					"name": "Guest - forgot password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\"email\":\"{{last_email}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/password_reset",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"password_reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									"pm.environment.set(\"user_refresh_token\", json.refresh_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Guest - refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\"refresh_token\":\"{{user_refresh_token}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token/refresh",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - invites",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\"email\":\"new-random-email@test.com\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/user_invites",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"user_invites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Push Notifications",
			"item": [
				{
					"name": "User - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Current Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_user_id\", json.user.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/me",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Add Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e712cc16-4004-4316-9ea5-1ea5608d4c1a",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"token_source\": \"example_token_source\",\n    \"token\": \"example_token\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Add 1 more Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e712cc16-4004-4316-9ea5-1ea5608d4c1a",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"token_source\": \"example_token_source\",\n    \"token\": \"example_token\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Show Push Notification Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c0a835f-c1ec-4316-ba26-232f97e66de0",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"push notification tokens should be present\", function(){",
									"    pm.expect(json.length).to.equal(2);",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token).to.equal(\"example_token\");",
									"});",
									"",
									"pm.environment.set(\"last_push_notification_token_id\", json[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Remove Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "007abc26-ee03-417b-a697-76e9fbd9f775",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/tokens/{{last_push_notification_token_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens",
								"{{last_push_notification_token_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Show Specific Users Push Notification Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a43b32d-797c-4fb5-8830-0623c9283d9b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"one push notification token should be removed\", function(){",
									"    pm.expect(json.length).to.equal(1);",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token).to.equal(\"example_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/{{last_user_id}}/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"{{last_user_id}}",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Transaction Detail Report",
					"item": [
						{
							"name": "OrgMember - Event - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba3137a-44b4-4df4-a044-9435b7a0b652",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=transaction_details&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "transaction_details"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should not be empty\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\t",
											"\tpm.expect(json).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=transaction_details&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "transaction_details"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should not be empty\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\t",
											"\tpm.expect(json).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bc986cc-78de-447b-a3cb-86f175a538b7",
										"exec": [
											"var moment = require('moment');",
											"var start_utc = moment().subtract(15, \"minutes\").utc().format(\"YYYY-MM-DDTHH:mm:ss\");",
											"var end_utc = moment().add(15, \"minutes\").utc().format(\"YYYY-MM-DDTHH:mm:ss\");",
											"pm.environment.set(\"start_utc\", start_utc);",
											"pm.environment.set(\"end_utc\", end_utc);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=transaction_details&start_utc={{start_utc}}&end_utc={{end_utc}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "transaction_details"
										},
										{
											"key": "start_utc",
											"value": "{{start_utc}}"
										},
										{
											"key": "end_utc",
											"value": "{{end_utc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Event Sales Summary",
					"item": [
						{
							"name": "OrgMember - Event - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba3137a-44b4-4df4-a044-9435b7a0b652",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=event_summary&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "event_summary"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should not be empty\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\t",
											"\tpm.expect(json).to.have.all.keys('event_id', 'sales', 'ticket_fees', 'other_fees');",
											"\tpm.expect(json.sales).to.not.be.empty;",
											"\tpm.expect(json.ticket_fees).to.not.be.empty;",
											"\tpm.expect(json.other_fees).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=event_summary&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "event_summary"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Event Audit Report",
					"item": [
						{
							"name": "OrgMember - Audit Report - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba3137a-44b4-4df4-a044-9435b7a0b652",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=audit_report&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "audit_report"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Audit Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should not be empty\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\t",
											"\tpm.expect(json.all_sales).to.have.all.keys('event_id', 'sales', 'ticket_fees', 'other_fees');",
											"\tpm.expect(json.all_sales.sales).to.not.be.empty;",
											"\tpm.expect(json.all_sales.ticket_fees).to.not.be.empty;",
											"\tpm.expect(json.all_sales.other_fees).to.not.be.empty;",
											"\t",
											"\tpm.expect(json.end_date_sales).to.have.all.keys('event_id', 'sales', 'ticket_fees', 'other_fees');",
											"\tpm.expect(json.end_date_sales.sales).to.not.be.empty;",
											"\tpm.expect(json.end_date_sales.ticket_fees).to.not.be.empty;",
											"\tpm.expect(json.end_date_sales.other_fees).to.not.be.empty;",
											"\t",
											"\tpm.expect(json.inventory).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=audit_report&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "audit_report"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Event Ticket Count",
					"item": [
						{
							"name": "OrgMember - Event - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba3137a-44b4-4df4-a044-9435b7a0b652",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_member_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=ticket_count&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "ticket_count"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OrgAdmin - Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"let json = JSON.parse(responseBody);",
											"pm.test(\"should not be empty\", function() {",
											"\tpm.expect(json).to.be.a('object');",
											"\t",
											"\t",
											"});",
											"pm.test(\"Nested elements should have sales / totals\", function () {",
											"    for (let org_id in json) {",
											"\t    for (let event_id in json[org_id]) {",
											"\t        for (let ticket_type_id in json[org_id][event_id]) {",
											"\t            pm.expect(json[org_id][event_id][ticket_type_id]).to.have.keys('sales', 'totals');",
											"\t        }",
											"\t    }",
											"\t}",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=ticket_count&event_id={{last_event_id}}",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "ticket_count"
										},
										{
											"key": "event_id",
											"value": "{{last_event_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Weekly Settlement Report",
					"item": [
						{
							"name": "OrgOwner - Weekly Settlement - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba3137a-44b4-4df4-a044-9435b7a0b652",
										"exec": [
											"pm.test(\"should be 401\", function() {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{org_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=weekly_settlement",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "weekly_settlement"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Weekly Settlement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d593ad4-0921-4427-9a81-4a4b3b46a72e",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"should not be empty\", function() {",
											"\tlet json = JSON.parse(responseBody);",
											"\tpm.expect(json.length).to.be.greaterThan(0);",
											"\tfor(let i=0; i< json.length; i++){",
											"    \tpm.expect(json[i]).to.have.all.keys('event_id','sales', 'ticket_fees', 'other_fees');",
											"    \tpm.expect(json[i].sales[i]).to.not.be.empty;",
											"    \tpm.expect(json[i].ticket_fees).to.not.be.empty;",
											"    \tpm.expect(json[i].other_fees).to.not.be.empty;",
											"\t}",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/reports/{{last_org_id}}?report=weekly_settlement",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"reports",
										"{{last_org_id}}"
									],
									"query": [
										{
											"key": "report",
											"value": "weekly_settlement"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}